# E.g. your domain name
modowner=com.mycompany

# Your module name
modname=my-module

# Your module version
version=1.0.0-final

# The test timeout in seconds
testtimeout=300

# Set to true if you want module dependencies to be pulled in and nested inside the module itself
pullInDeps=true

# Set to true if you want to build a fat executable jar containing everything needed to run the module
createFatJar=true

# The version of Groovy language to compile against (if you are using Groovy compiled verticles or VertxTests)
groovyLangModVersion=2.0.0-final

# The version of Groovy to use (if you are using Groovy)
groovyVersion=2.1.5


# The version of the Scala module
#rememeber to add to the default language:
#  scala=io.vertx~lang-scala_2.10~1.0.1-RC3:org.vertx.scala.platform.impl.ScalaVerticleFactory
#  scala=io.vertx~lang-scala_2.11~1.0.1-RC3:org.vertx.scala.platform.impl.ScalaVerticleFactory
# OR
# "lang-impl":"io.vertx~lang-scala_2.10~1.0.1-RC3:org.vertx.scala.platform.impl.ScalaVerticleFactory",
# "lang-impl":"io.vertx~lang-scala_2.11~1.0.1-RC3:org.vertx.scala.platform.impl.ScalaVerticleFactory",
# to your mod.json according to the scala target
scalaLangModVersion=lang-scala_2.11:1.0.1-RC3
#old version
#scalaLangModVersion=lang-scala:1.0.0


# The version of Scala to use
scalaVersion=2.11.2

# Gradle version
gradleVersion=1.10


# The version of Vert.x
vertxVersion=2.1.5

# The version of Vert.x test tools
toolsVersion=2.0.3-final

# The version of JUnit
junitVersion=4.10

# Command line arguments to use when running any of the variations of ./gradlew runMod
# These are the exact same command line args that you would pass to 'vertx runmod <module-name>' on the command line
runModArgs=-conf conf.json

# e.g.
# runModArgs=-conf foo.json
# runModArgs=-conf someconf.json -ha
# runModArgs=-cluster
